package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tele "gopkg.in/telebot.v3"

	"github.com/joho/godotenv"
)

// init is invoked before main()
func init() {
	// loads values from .env into the system
	if err := godotenv.Load(); err != nil {
		log.Print("No .env file found")
	}
}

func main() {
	botToken, _ := os.LookupEnv("TOKEN")

	pref := tele.Settings{
		Token: botToken,

		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	db := InitDb()
	b, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	var (
		// Universal markup builders.
		menu     = &tele.ReplyMarkup{ResizeKeyboard: true}
		selector = &tele.ReplyMarkup{}

		// Reply buttons.
		btnShowMovementTypes = menu.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å/‚ûñ –£–±—Ä–∞—Ç—å")

		btnShowMovements = menu.Text("üìà –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è")

		btnShowBalance = menu.Text("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å")

		// Inline buttons.
		btnPrev = selector.Data("‚¨Ö", "prev")
		btnNext = selector.Data("‚û°", "next")
	)

	menu.Reply(
		menu.Row(btnShowMovementTypes),
		menu.Row(btnShowMovements),
		menu.Row(btnShowBalance),
	)
	selector.Inline(
		selector.Row(btnPrev, btnNext),
	)

	b.Handle("/start", func(c tele.Context) error {
		result := CreateUser(db, c.Message().Sender.ID, 0, c.Message().Sender.Username) // –ø–µ—Ä–µ–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –≤ Create
		if result.Error == nil {
			log.Println(result.Error)
			return c.Send(
				"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
				menu)
		}
		answer := fmt.Sprintf("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?")
		return c.Send(answer, menu)
	})

	// TODO –¥–æ–±–∞–≤–∏—Ç—å FSM
	b.Handle(btnShowMovementTypes.Text, func(c tele.Context) error {
		return c.Send(
			"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"+
				"–î–û–•–û–î <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n\n"+
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"+
				"–†–ê–°–•–û–î <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n\n"+
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"+
				"–ö–û–ü–ò–õ–ö–ê <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n\n"+
				"–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"+
				"-–ö–û–ü–ò–õ–ö–ê <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n\n",
			menu,
		)
	})

	// TODO –¥–æ–±–∞–≤–∏—Ç—å FSM
	// TODO –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
	// TODO –≤—ã–±–æ—Ä –ø–æ —Ç–∏–ø—É –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–π
	// TODO –≤—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	b.Handle(btnShowMovements.Text, func(c tele.Context) error {
		return c.Send(
			"–í–∞—à–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –∑–∞:\n\n" +
				"- –°–µ–≥–æ–¥–Ω—è\n" +
				"- –ú–µ—Å—è—Ü\n" +
				"- –ì–æ–¥\n",
		)
	})

	// TODO –¥–æ–±–∞–≤–∏—Ç—å FSM
	// TODO –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
	b.Handle(btnShowBalance.Text, func(c tele.Context) error {
		user := GetUserByTelegramId(db, c.Sender().ID)
		answer := fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d —Ä—É–±.\n\n"+
			"–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é: /start", user.Balance)
		return c.Send(
			answer,
		)
	})

	b.Handle(tele.OnText, func(c tele.Context) error {
		// All the text messages that weren't
		// captured by existing handlers.
		var (
			user    = GetUserByTelegramId(db, c.Message().Sender.ID)
			textArr = strings.Split(c.Text(), " ")
		)
		moneyMovementTypeString := textArr[0]
		switch moneyMovementTypeString {
		case "–î–û–•–û–î":
			quantity, err := strconv.Atoi(textArr[2])
			if err != nil {
				log.Println(err)
				return c.Send("–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ.")
			}

			moneyMovementType := GetMoneyMovementTypeByName(db, moneyMovementTypeString)

			var category Category
			categoryName := textArr[1]
			result := db.First(&category, "name = ?", categoryName)
			if result.Error != nil {
				//return c.Send("–î–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
				result, category = CreateCategory(db, user, textArr[1], moneyMovementType)
			}

			CreateMoneyMovement(db, user, int64(quantity), category)
			UpdateUserBalance(db, user, quantity)
			return c.Send("–î–û–•–û–î —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		case "–†–ê–°–•–û–î":
			quantity, err := strconv.Atoi(textArr[2])
			if err != nil {
				log.Println(err)
				return c.Send("–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ.")
			}

			moneyMovementType := GetMoneyMovementTypeByName(db, moneyMovementTypeString)

			var category Category
			categoryName := textArr[1]
			result := db.First(&category, "name = ?", categoryName)
			if result.Error != nil {
				//return c.Send("–î–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
				result, category = CreateCategory(db, user, textArr[1], moneyMovementType)
			}

			CreateMoneyMovement(db, user, int64(quantity), category)
			UpdateUserBalance(db, user, -quantity)
			return c.Send("–†–ê–°–•–û–î —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		case "–ö–û–ü–ò–õ–ö–ê":
			quantity, err := strconv.Atoi(textArr[2])
			if err != nil {
				log.Println(err)
				return c.Send("–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ.")
			}

			moneyMovementType := GetMoneyMovementTypeByName(db, moneyMovementTypeString)

			var category Category
			categoryName := textArr[1]
			result := db.First(&category, "name = ?", categoryName)
			if result.Error != nil {
				//return c.Send("–î–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
				result, category = CreateCategory(db, user, textArr[1], moneyMovementType)
			}

			CreateMoneyMovement(db, user, int64(quantity), category)
			UpdateUserBalance(db, user, quantity)
			return c.Send("–ö–û–ü–ò–õ–ö–ê —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		case "-–ö–û–ü–ò–õ–ö–ê":
			quantity, err := strconv.Atoi(textArr[2])
			if err != nil {
				log.Println(err)
				return c.Send("–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ.")
			}

			moneyMovementType := GetMoneyMovementTypeByName(db, moneyMovementTypeString)

			var category Category
			categoryName := textArr[1]
			result := db.First(&category, "name = ?", categoryName)
			if result.Error != nil {
				//return c.Send("–î–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
				result, category = CreateCategory(db, user, textArr[1], moneyMovementType)
			}

			CreateMoneyMovement(db, user, int64(quantity), category)
			UpdateUserBalance(db, user, -quantity)
			return c.Send("-–ö–û–ü–ò–õ–ö–ê —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		default:

			return c.Send("–Ø –≤–∞—Å –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è–ª! –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é /help")
		}
	})

	// On inline button pressed (callback)
	b.Handle(&btnPrev, func(c tele.Context) error {
		return c.Respond()
	})

	b.Handle("/hello", func(c tele.Context) error {
		return c.Send("Hello!")
	})
	log.Printf("BOT STARTED\n")
	b.Start()
}
